{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TodoService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:5000/api/todo';\n  }\n  getTodos() {\n    return this.http.get(this.apiUrl).pipe(catchError(this.handleError));\n  }\n  addTodo(title) {\n    return this.http.post(this.apiUrl, {\n      title\n    }).pipe(catchError(this.handleError));\n  }\n  deleteTodo(id) {\n    return this.http.delete(`${this.apiUrl}/${id}`).pipe(catchError(this.handleError));\n  }\n  toggleTodoComplete(id) {\n    return this.http.patch(`${this.apiUrl}/${id}/toggle`, {}).pipe(catchError(this.handleError));\n  }\n  handleError(error) {\n    let errorMessage = 'An error occurred';\n    if (error.error instanceof ErrorEvent) {\n      // Client-side error\n      errorMessage = `Error: ${error.error.message}`;\n    } else {\n      // Server-side error\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    console.error(errorMessage);\n    return throwError(() => errorMessage);\n  }\n  static {\n    this.ɵfac = function TodoService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || TodoService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TodoService,\n      factory: TodoService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["throwError","catchError","TodoService","constructor","http","apiUrl","getTodos","get","pipe","handleError","addTodo","title","post","deleteTodo","id","delete","toggleTodoComplete","patch","error","errorMessage","ErrorEvent","message","status","console","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\pradh\\OneDrive\\Desktop\\To-do App\\client\\src\\app\\todo.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { TodoItem } from './models';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TodoService {\r\n  private readonly apiUrl = 'http://localhost:5000/api/todo';\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getTodos(): Observable<TodoItem[]> {\r\n    return this.http.get<TodoItem[]>(this.apiUrl)\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  addTodo(title: string): Observable<TodoItem> {\r\n    return this.http.post<TodoItem>(this.apiUrl, { title })\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  deleteTodo(id: string): Observable<void> {\r\n    return this.http.delete<void>(`${this.apiUrl}/${id}`)\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  toggleTodoComplete(id: string): Observable<TodoItem> {\r\n    return this.http.patch<TodoItem>(`${this.apiUrl}/${id}/toggle`, {})\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  private handleError(error: HttpErrorResponse): Observable<never> {\r\n    let errorMessage = 'An error occurred';\r\n    \r\n    if (error.error instanceof ErrorEvent) {\r\n      // Client-side error\r\n      errorMessage = `Error: ${error.error.message}`;\r\n    } else {\r\n      // Server-side error\r\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\r\n    }\r\n    \r\n    console.error(errorMessage);\r\n    return throwError(() => errorMessage);\r\n  }\r\n}\r\n"],"mappings":"AAEA,SAAqBA,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,QAAQ,gBAAgB;;;AAM3C,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFP,KAAAC,MAAM,GAAG,gCAAgC;EAElB;EAExCC,QAAQA,CAAA;IACN,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAa,IAAI,CAACF,MAAM,CAAC,CAC1CG,IAAI,CACHP,UAAU,CAAC,IAAI,CAACQ,WAAW,CAAC,CAC7B;EACL;EAEAC,OAAOA,CAACC,KAAa;IACnB,OAAO,IAAI,CAACP,IAAI,CAACQ,IAAI,CAAW,IAAI,CAACP,MAAM,EAAE;MAAEM;IAAK,CAAE,CAAC,CACpDH,IAAI,CACHP,UAAU,CAAC,IAAI,CAACQ,WAAW,CAAC,CAC7B;EACL;EAEAI,UAAUA,CAACC,EAAU;IACnB,OAAO,IAAI,CAACV,IAAI,CAACW,MAAM,CAAO,GAAG,IAAI,CAACV,MAAM,IAAIS,EAAE,EAAE,CAAC,CAClDN,IAAI,CACHP,UAAU,CAAC,IAAI,CAACQ,WAAW,CAAC,CAC7B;EACL;EAEAO,kBAAkBA,CAACF,EAAU;IAC3B,OAAO,IAAI,CAACV,IAAI,CAACa,KAAK,CAAW,GAAG,IAAI,CAACZ,MAAM,IAAIS,EAAE,SAAS,EAAE,EAAE,CAAC,CAChEN,IAAI,CACHP,UAAU,CAAC,IAAI,CAACQ,WAAW,CAAC,CAC7B;EACL;EAEQA,WAAWA,CAACS,KAAwB;IAC1C,IAAIC,YAAY,GAAG,mBAAmB;IAEtC,IAAID,KAAK,CAACA,KAAK,YAAYE,UAAU,EAAE;MACrC;MACAD,YAAY,GAAG,UAAUD,KAAK,CAACA,KAAK,CAACG,OAAO,EAAE;IAChD,CAAC,MAAM;MACL;MACAF,YAAY,GAAG,eAAeD,KAAK,CAACI,MAAM,cAAcJ,KAAK,CAACG,OAAO,EAAE;IACzE;IAEAE,OAAO,CAACL,KAAK,CAACC,YAAY,CAAC;IAC3B,OAAOnB,UAAU,CAAC,MAAMmB,YAAY,CAAC;EACvC;;;uCA9CWjB,WAAW,EAAAsB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAXzB,WAAW;MAAA0B,OAAA,EAAX1B,WAAW,CAAA2B,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}